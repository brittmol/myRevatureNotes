* use ArrayList for storing & accessing data
* use LinkedList for manipulating data

                            Collection                          (Not Collections)
Set                 List                Queue / Deque               Map
- HashSet           - ArrayList         - PriorityQueue             - HashMap
- LinkedHashSet     - LinkedList        - LinkedList                - LinkedHashMap
- TreeSet           - Vector            - ArrayDeque                - HashTable
                        -> Stack                                    - TreeMap

The important interfaces in the Collections API are:

    Iterable - guarantees the collection can be iterated over
    List - ordered
    Set - no duplicates
    Queue - first-in-first-out (FIFO)
    Map - contains key/value pairs

Linked List METHODS (general)
- get(), getFirst(), getLast()
- add(), addFirst(), addLast()
- remove(), removeFirst(), removeLast()
- set()

Collection Interface: extended by = List, Queue, or Set (not Map)

List Interface      subclasses --> ArrayList, Vector, LinkedList
    - ordered
    - uses indexes

Set Interface       subclasses --> HashSet, LinkedHashSet, TreeSet
    - unique elements (no duplicates)
    - no order

    METHODS:
    -size( )
    -add( )
    -remove( )
    -clear( )
    -contains( ) *returns boolean
    -isEmpty( ) *returns boolean
    -iterator( ) *Returns an Iterator object for the collection, which may be used to retrieve an object.

Queue Interface     sublcasses --> LinkedList, Priority queue, ArrayQueue, Priority Blocking Queue, Linked Blocking Queue
    - ordered
    - elements are added at end
    - elements are removed only from the head

    METHODS:
    -element()
    -add(Object obj)
    -offer() *inserts new element onto queue at end (wont throw exception)
    -poll()  *removes element from front of queue (wont throw exception)
    -peek()  *inspects head of queue w/o removing
    -remove()


Deque Interface     subclasses --> LinkedList, ArrayDeque
    - double-ended queue (extends queue interface)
    - elements can be inserted and removed from EITHER end

    METHODS:
    - push() *adds first
    - offer() *adds last
    - pop() *removes first

Map Interface       subclasses --> HashMap, HashTable, LinkedHashMap, TreeMap
    - Key/Value pairs
    - no duplicate keys (yes duplicate values)

    METHODS
    - entrySet()
    - keySet()
    - values()
    - put(key, value) *adds
    - getKey() or getValue()


Iterating:
    ex: int[] nums = new int[1, 2, 3, 4]
            for(int x : nums){
                System.out.println(x)
            }
    ex: Set<Integer> nums = new HashSet<>()      nums.add(1)...
            for(Integer x:nums){
                System.out.println(x)
            }

            Iterator<Integer> iter = nums.iterator();
            while(iter.hasNext()){
                System.out.println(iter.next())
            }

    ex: Queue<Integer> nums = new LinkedList<>()    nums.add(1)... or nums.offer(1)...
            Iterator<Integer> iter = nums.iterator();
            while(iter.hasNext()){
                System.out.println(iter.next())
            }

    ex: HashMap<String, Integer> areaCodeMap = new HashMap<>()      areaCodeMap.put("Miami", 305)...
            for(String key : areaCodeMap.keySet()){
                System.out.println(key, areaCodeMap.get(key))
            }


Methods of the Collection Interface:
The Collection interface consists of a total of fifteen methods for manipulating elements in the collection. They are as follows:

add(): This method is used to add or insert an element in the collection. The general syntax for add() method is as follows:
add(Object element) : boolean
If the element is added to the collection. This method will return true when the elements is successfully added. Otherwise it will return false, if the element is already present and the collection doesnâ€™t allow duplicates.
addAll(): This method adds a collection of elements to the collection. It returns true if the elements are added otherwise returns false. The general syntax for this method is as follows:
addAll(Collection c) : boolean
clear(): This method clears or removes all the elements from the collection. The general form of this method is as follows:
clear() : void
contains(): It checks that element is present or not in a collection. That is it is used to search an element. The general for contains() method is as follows:
contains(Object element) : boolean
This method returns true if the element is present otherwise false.
containsAll(): This method checks that specified a collection of elements are present or not. It returns true if the calling collection contains all specified elements otherwise return false. The general syntax is as follows:
containsAll(Collection c) : boolean
equals(): It checks for equality with another object. The general form is as follows:
equals(Object element) : boolean
hashCode(): It returns the hash code number for the collection. Its return type is an integer. The general form for this method is:
hashCode() : int
isEmpty(): It returns true if a collection is empty. That is, this method returns true if the collection contains no elements.
isEmpty() : boolean
iterator(): It returns an iterator. The general form is given below:
iterator() : Iterator
remove(): It removes a specified element from the collection. The general syntax is given below:
remove(Object element) : boolean
This method returns true if the element was removed. Otherwise, it returns false.
removeAll(): The removeAll() method removes all elements from the collection. It returns true if all elements are removed otherwise returns false.
removeAll(Collection c) : boolean
retainAll(): This method is used to remove all elements from the collection except the specified collection. It returns true if all the elements are removed otherwise returns false.
retainAll(Collection c) : boolean
size(): The size() method returns the total number of elements in the collection. Its return type is an integer. The general syntax is given below:
size() : int
toArray(): It returns the elements of a collection in the form of an array. The array elements are copies of the collection elements.
toArray() :
Object[]Object[ ] toArray(): Returns an array that contains all the elements stored in the invoking collection. The array elements are the copies of the collection elements.
toArray(Object array[]) : Object[]
